/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Student;
import io.swagger.model.StudentList;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-30T02:05:22.682550422Z[GMT]")
@Validated
public interface V1Api {

    @Operation(summary = "Course List", description = "Get a list of courses", tags={ "Courses" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of courses", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))),
        
        @ApiResponse(responseCode = "400", description = "No course found") })
    @RequestMapping(value = "/v1/courses",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> v1CoursesGet(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "courseId", required = false) Integer courseId);


    @Operation(summary = "Students List", description = "Get a list of students", tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of students", content = @Content(mediaType = "application/json", schema = @Schema(implementation = StudentList.class))),
        
        @ApiResponse(responseCode = "400", description = "No students found") })
    @RequestMapping(value = "/v1/students",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StudentList> v1StudentsGet();


    @Operation(summary = "Create student", description = "create a new student", tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Student created") })
    @RequestMapping(value = "/v1/students",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> v1StudentsPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Student body);


    @Operation(summary = "Delete Student", description = "Delete student by id", tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Student updated"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/students/{studentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> v1StudentsStudentIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("studentId") UUID studentId);


    @Operation(summary = "Student By Id", description = "Get a **single** student by id", tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Student info", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Student.class))) })
    @RequestMapping(value = "/v1/students/{studentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Student> v1StudentsStudentIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("studentId") UUID studentId);


    @Operation(summary = "Update Student", description = "Update student by id", tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Student updated") })
    @RequestMapping(value = "/v1/students/{studentId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> v1StudentsStudentIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("studentId") UUID studentId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Student body);

}

